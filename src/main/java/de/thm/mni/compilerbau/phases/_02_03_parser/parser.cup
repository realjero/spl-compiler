package de.thm.mni.compilerbau.phases._02_03_parser;

import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.*;
import de.thm.mni.compilerbau.phases._01_scanner.Scanner;
import de.thm.mni.compilerbau.absyn.*;
import de.thm.mni.compilerbau.table.Identifier;
import de.thm.mni.compilerbau.utils.SplError;
import de.thm.mni.compilerbau.CommandLineOptions;

parser code {:
  public CommandLineOptions options = null;

  public void syntax_error(Symbol currentToken) {
    throw SplError.SyntaxError(new Position(currentToken.left, currentToken.right), ((Scanner)getScanner()).yytext());
  }
  
  /**
   * @return An empty list. (Uses LinkedList)
   */
  public static <E> List<E> nil() {
      return new LinkedList<E>();
  }
  
  /**
   * Constructs a list from a head and a tail without modifying the tail (Uses LinkedList).
   * Use this as a helper if you don't want to deal with constructing lists manually.
   *
   * @param head The head of the list
   * @param tail The tail of the list
   * @return A list containing the head element and all elements of tail
   */
  public static <E> List<E> cons(E head, List<E> tail) {
    List<E> copy = new LinkedList(tail);
    copy.add(0, head);
    return copy;
  }
:}

/* Terminals/Tokens */
terminal LBRACK, RBRACK, LPAREN, RPAREN, LCURL, RCURL;         //Braces, parenthesis, brackets
terminal LT, LE, GT, GE, NE, EQ;                               //Comparison operators
terminal PLUS, MINUS, STAR, SLASH;                             //Arithmetic operators
terminal ASGN, COMMA, COLON, SEMIC;                            //Other delimiters
terminal TYPE, PROC, ARRAY, OF, REF, VAR, IF, ELSE, WHILE;     //Keywords

terminal Identifier IDENT;    //Identifiers
terminal Integer INTLIT;      //Integer literals

/* Non-terminals */
nonterminal Program program;

nonterminal globalDeclarations;

// TYPE/VARIABLE/ARRAY
nonterminal variables;

nonterminal typeDeclaration;
nonterminal variableDeclaration;

nonterminal namedTypeExpression;
nonterminal arrayTypeExpression;
nonterminal variableExpression;

nonterminal arrayAccess;
nonterminal dimAccess;

nonterminal namedVariable;
nonterminal intLiteral;

// PRECEDENCE & COMPARABLE
nonterminal binaryExpression;
nonterminal expr_comparable;
nonterminal expr;
nonterminal term;
nonterminal faktor;

// PROC
nonterminal procedureDeclaration;
nonterminal parameters;
nonterminal parameterDeclaration;

// BODY
nonterminal body;
nonterminal statements;
nonterminal assignStatement;
nonterminal ifStatement;
nonterminal callStatment;
nonterminal whileStatement;

nonterminal arguments;

start with program;



program ::=                     program globalDeclarations
                                | globalDeclarations;

globalDeclarations ::=          typeDeclaration
                                | procedureDeclaration;


// TYPE/VARIABLE/ARRAY
variables ::=                   variables variableDeclaration
                                | /*empty*/;

typeDeclaration ::=             TYPE IDENT EQ namedTypeExpression SEMIC
                                | TYPE IDENT EQ arrayTypeExpression SEMIC;

variableDeclaration::=          VAR IDENT COLON namedTypeExpression SEMIC
                                | VAR IDENT COLON arrayTypeExpression SEMIC;

namedTypeExpression ::=         IDENT;

arrayTypeExpression ::=         ARRAY LBRACK INTLIT RBRACK OF arrayTypeExpression
                                | ARRAY LBRACK INTLIT RBRACK OF namedTypeExpression;

variableExpression ::=          namedVariable;

arrayAccess ::=                 namedVariable dimAccess;

dimAccess ::=                   dimAccess LBRACK binaryExpression RBRACK
                                | LBRACK binaryExpression RBRACK;

namedVariable ::=               IDENT;
intLiteral ::=                  INTLIT;


// PRECEDENCE
binaryExpression ::=            expr_comparable
                                | expr;

expr_comparable ::=             expr LT expr
                                | expr LE expr
                                | expr GT expr
                                | expr GE expr
                                | expr NE expr
                                | expr EQ expr;

expr ::=                        expr PLUS term
                                | expr MINUS term
                                | term;

term ::=                        term STAR faktor
                                | term SLASH faktor
                                | faktor;

faktor ::=                      LPAREN expr RPAREN
                                | MINUS faktor
                                | variableExpression
                                | intLiteral
                                | arrayAccess;


// PROC
procedureDeclaration ::=        PROC IDENT LPAREN parameters RPAREN LCURL variables body RCURL;

parameters ::=                  parameters COMMA parameterDeclaration
                                | parameterDeclaration
                                | /* empty */;

parameterDeclaration ::=        IDENT COLON namedTypeExpression
                                | REF IDENT COLON namedTypeExpression;


// BODY
body ::=                        body statements
                                | /* empty */;

statements ::=                  SEMIC
                                | LCURL body RCURL
                                | assignStatement
                                | ifStatement
                                | whileStatement
                                | callStatment;

assignStatement ::=             namedVariable ASGN binaryExpression SEMIC
                                | arrayAccess ASGN binaryExpression SEMIC;

ifStatement ::=                 IF LPAREN binaryExpression RPAREN statements
                                | IF LPAREN binaryExpression RPAREN statements ELSE statements;

whileStatement ::=              WHILE LPAREN binaryExpression RPAREN statements;

callStatment ::=                IDENT LPAREN arguments RPAREN SEMIC;

arguments ::=                   arguments COMMA binaryExpression
                                | binaryExpression;