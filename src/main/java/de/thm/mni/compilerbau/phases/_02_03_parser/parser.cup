package de.thm.mni.compilerbau.phases._02_03_parser;

import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.*;
import de.thm.mni.compilerbau.phases._01_scanner.Scanner;
import de.thm.mni.compilerbau.absyn.*;
import de.thm.mni.compilerbau.table.Identifier;
import de.thm.mni.compilerbau.utils.SplError;
import de.thm.mni.compilerbau.CommandLineOptions;

parser code {:
  public CommandLineOptions options = null;

  public void syntax_error(Symbol currentToken) {
    throw SplError.SyntaxError(new Position(currentToken.left, currentToken.right), ((Scanner)getScanner()).yytext());
  }
  
  /**
   * @return An empty list. (Uses LinkedList)
   */
  public static <E> List<E> nil() {
      return new LinkedList<E>();
  }
  
  /**
   * Constructs a list from a head and a tail without modifying the tail (Uses LinkedList).
   * Use this as a helper if you don't want to deal with constructing lists manually.
   *
   * @param head The head of the list
   * @param tail The tail of the list
   * @return A list containing the head element and all elements of tail
   */
  public static <E> List<E> cons(E head, List<E> tail) {
    List<E> copy = new LinkedList(tail);
    copy.add(0, head);
    return copy;
  }
:}

/* Terminals/Tokens */
terminal LBRACK, RBRACK, LPAREN, RPAREN, LCURL, RCURL;         //Braces, parenthesis, brackets
terminal LT, LE, GT, GE, NE, EQ;                               //Comparison operators
terminal PLUS, MINUS, STAR, SLASH;                             //Arithmetic operators
terminal ASGN, COMMA, COLON, SEMIC;                            //Other delimiters
terminal TYPE, PROC, ARRAY, OF, REF, VAR, IF, ELSE, WHILE;     //Keywords

terminal Identifier IDENT;    //Identifiers
terminal Integer INTLIT;      //Integer literals

/* Non-terminals */
nonterminal Program program;

nonterminal List<GlobalDeclaration> globalDeclarations;
nonterminal GlobalDeclaration globalDeclaration;

// TYPE/VARIABLE/ARRAY
nonterminal List<VariableDeclaration> variables;

nonterminal TypeDeclaration typeDeclaration;
nonterminal VariableDeclaration variableDeclaration;

nonterminal NamedTypeExpression namedTypeExpression;
nonterminal ArrayTypeExpression arrayTypeExpression;
nonterminal Variable variable;

nonterminal ArrayAccess arrayAccess;
nonterminal Expression dimAccess;

nonterminal NamedVariable namedVariable;
nonterminal IntLiteral intLiteral;

// PRECEDENCE & COMPARABLE
nonterminal Expression binaryExpression;
nonterminal Expression expr_comparable;
nonterminal Expression expr;
nonterminal Expression term;
nonterminal Expression faktor;

// PROC
nonterminal ProcedureDeclaration procedureDeclaration;
nonterminal List<ParameterDeclaration> parameters;
nonterminal ParameterDeclaration parameterDeclaration;

// BODY
nonterminal List<Statement> body;
nonterminal Statement statement;
nonterminal AssignStatement assignStatement;
nonterminal IfStatement ifStatement;
nonterminal CallStatement callStatement;
nonterminal WhileStatement whileStatement;

nonterminal List<Expression> arguments;

start with program;



program ::=                     globalDeclarations:gdls                                                                 {:RESULT = new Program(new Position(gdlsleft, gdlsright), gdls);:};

globalDeclarations ::=          globalDeclaration:gdl globalDeclarations:gdls                                           {:RESULT = cons(gdl, gdls);:}
                                | /* empty */                                                                           {:RESULT = nil();:};

globalDeclaration ::=           typeDeclaration:td                                                                      {:RESULT = td;:}
                                | procedureDeclaration:pd                                                               {:RESULT = pd;:};


// TYPE/VARIABLE/ARRAY
variables ::=                   variableDeclaration:vd variables:vs                                                     {:RESULT = cons(vd, vs);:}
                                | /*empty*/                                                                             {:RESULT = nil();:};

typeDeclaration ::=             TYPE:pos IDENT:id EQ namedTypeExpression:expr SEMIC                                     {:RESULT = new TypeDeclaration(new Position(posleft, posright), id, expr);:}
                                | TYPE:pos IDENT:id EQ arrayTypeExpression:expr SEMIC                                   {:RESULT = new TypeDeclaration(new Position(posleft, posright), id, expr);:};

variableDeclaration::=          VAR:pos IDENT:id COLON namedTypeExpression:expr SEMIC                                   {:RESULT = new VariableDeclaration(new Position(posleft, posright), id, expr);:}
                                | VAR:pos IDENT:id COLON arrayTypeExpression:expr SEMIC                                 {:RESULT = new VariableDeclaration(new Position(posleft, posright), id, expr);:};

namedTypeExpression ::=         IDENT:id                                                                                {:RESULT = new NamedTypeExpression(new Position(idleft, idright), id);:};

arrayTypeExpression ::=         ARRAY:pos LBRACK INTLIT:size RBRACK OF arrayTypeExpression:expr                         {:RESULT = new ArrayTypeExpression(new Position(posleft, posright), size, expr);:}
                                | ARRAY:pos LBRACK INTLIT:size RBRACK OF namedTypeExpression:expr                       {:RESULT = new ArrayTypeExpression(new Position(posleft, posright), size, expr);:};

variable ::=                    namedVariable:nV                                                                        {:RESULT = nV;:}
                                | arrayAccess:a                                                                         {:RESULT = a;:};

arrayAccess ::=                 variable:pos LBRACK expr:index RBRACK                                                   {:RESULT = new ArrayAccess(new Position(posleft, posright), pos, index);:};

namedVariable ::=               IDENT:id                                                                                {:RESULT = new NamedVariable(new Position(idleft, idright), id);:};
intLiteral ::=                  INTLIT:i                                                                                {:RESULT = new IntLiteral(new Position(ileft, iright), i);:};


// PRECEDENCE
binaryExpression ::=            expr_comparable:ec                                                                      {:RESULT = ec;:}
                                | expr:e                                                                                {:RESULT = e;:};

expr_comparable ::=             expr:e1 LT:op expr:e2                                                                   {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.LST, e1, e2);:}
                                | expr:e1 LE:op expr:e2                                                                 {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.LSE, e1, e2);:}
                                | expr:e1 GT:op expr:e2                                                                 {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.GRT, e1, e2);:}
                                | expr:e1 GE:op expr:e2                                                                 {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.GRE, e1, e2);:}
                                | expr:e1 NE:op expr:e2                                                                 {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.NEQ, e1, e2);:}
                                | expr:e1 EQ:op expr:e2                                                                 {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.EQU, e1, e2);:};

expr ::=                        expr:e PLUS:op term:t                                                                   {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.ADD, e, t);:}
                                | expr:e MINUS:op term:t                                                                {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.SUB, e, t);:}
                                | term:t                                                                                {:RESULT = t;:};

term ::=                        term:t STAR:op faktor:f                                                                 {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.MUL, t, f);:}
                                | term:t SLASH:op faktor:f                                                              {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.DIV, t, f);:}
                                | faktor:f                                                                              {:RESULT = f;:};

faktor ::=                      LPAREN expr:e RPAREN                                                                    {:RESULT = e;:}
                                | MINUS:op faktor:f                                                                     {:RESULT = new UnaryExpression(new Position(opleft, opright), UnaryExpression.Operator.MINUS, f);:}
                                | variable:v                                                                            {:RESULT = new VariableExpression(new Position(vleft, vright), v);:}
                                | intLiteral:i                                                                          {:RESULT = i;:};


// PROC
procedureDeclaration ::=        PROC:pos IDENT:id LPAREN parameters:p RPAREN LCURL variables:v body:b RCURL             {:RESULT = new ProcedureDeclaration(new Position(posleft, posright), id, p, v, b);:}
                                | PROC:pos IDENT:id LPAREN RPAREN LCURL variables:v body:b RCURL                        {:RESULT = new ProcedureDeclaration(new Position(posleft, posright), id, nil(), v, b);:};

parameters ::=                  parameterDeclaration:pd COMMA parameters:p                                              {:RESULT = cons(pd, p);:}
                                | parameterDeclaration:pd                                                               {:RESULT = cons(pd, nil());:};

parameterDeclaration ::=        IDENT:pos COLON namedTypeExpression:exp                                                 {:RESULT = new ParameterDeclaration(new Position(posleft, posright), pos, exp, false);:}
                                | REF IDENT:pos COLON namedTypeExpression:exp                                           {:RESULT = new ParameterDeclaration(new Position(posleft, posright), pos, exp, true);:};


// BODY
body ::=                        statement:s body:b                                                                      {:RESULT = cons(s, b);:}
                                | /* empty */                                                                           {:RESULT = nil();:};

statement ::=                   SEMIC:pos                                                                               {:RESULT = new EmptyStatement(new Position(posleft, posright));:}
                                | LCURL body:pos RCURL                                                                  {:RESULT = new CompoundStatement(new Position(posleft, posright), pos);:}
                                | assignStatement:as                                                                    {:RESULT = as;:}
                                | ifStatement:is                                                                        {:RESULT = is;:}
                                | whileStatement:ws                                                                     {:RESULT = ws;:}
                                | callStatement:cs                                                                      {:RESULT = cs;:};

assignStatement ::=             namedVariable:pos ASGN binaryExpression:expr SEMIC                                      {:RESULT = new AssignStatement(new Position(posleft, posright), pos, expr);:}
                                | arrayAccess:pos ASGN binaryExpression:expr SEMIC                                      {:RESULT = new AssignStatement(new Position(posleft, posright), pos, expr);:};

ifStatement ::=                 IF:pos LPAREN binaryExpression:exp RPAREN statement:stm                                 {:RESULT = new IfStatement(new Position(posleft, posright), exp, stm, new EmptyStatement(Position.ERROR_POSITION));:}
                                | IF:pos LPAREN binaryExpression:exp RPAREN statement:stm ELSE statement:els            {:RESULT = new IfStatement(new Position(posleft, posright), exp, stm, els);:};

whileStatement ::=              WHILE:pos LPAREN binaryExpression:exp RPAREN statement:stm                              {:RESULT = new WhileStatement(new Position(posleft, posright), exp, stm);:};

callStatement ::=               IDENT:id LPAREN arguments:args RPAREN SEMIC                                             {:RESULT = new CallStatement(new Position(idleft, idright), id, args);:}
                                | IDENT:id LPAREN RPAREN SEMIC                                                          {:RESULT = new CallStatement(new Position(idleft, idright), id, nil());:};

arguments ::=                   binaryExpression:be COMMA arguments:a                                                   {:RESULT = cons(be, a);:}
                                | binaryExpression:be                                                                   {:RESULT = cons(be, nil());:};